// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import sessions "git.zam.io/wallet-backend/web-api/services/sessions"
import time "time"

// IStorage is an autogenerated mock type for the IStorage type
type IStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: toke
func (_m *IStorage) Delete(toke sessions.Token) error {
	ret := _m.Called(toke)

	var r0 error
	if rf, ok := ret.Get(0).(func(sessions.Token) error); ok {
		r0 = rf(toke)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: token
func (_m *IStorage) Get(token sessions.Token) (map[string]interface{}, error) {
	ret := _m.Called(token)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(sessions.Token) map[string]interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sessions.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: data, expireAfter
func (_m *IStorage) New(data map[string]interface{}, expireAfter time.Duration) (sessions.Token, error) {
	ret := _m.Called(data, expireAfter)

	var r0 sessions.Token
	if rf, ok := ret.Get(0).(func(map[string]interface{}, time.Duration) sessions.Token); ok {
		r0 = rf(data, expireAfter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sessions.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}, time.Duration) error); ok {
		r1 = rf(data, expireAfter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: oldToken, expireAfter
func (_m *IStorage) RefreshToken(oldToken sessions.Token, expireAfter time.Duration) (sessions.Token, error) {
	ret := _m.Called(oldToken, expireAfter)

	var r0 sessions.Token
	if rf, ok := ret.Get(0).(func(sessions.Token, time.Duration) sessions.Token); ok {
		r0 = rf(oldToken, expireAfter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sessions.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sessions.Token, time.Duration) error); ok {
		r1 = rf(oldToken, expireAfter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
