// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import nosql "git.zam.io/wallet-backend/web-api/services/nosql"
import time "time"

// IStorage is an autogenerated mock type for the IStorage type
type IStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *IStorage) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *IStorage) Get(key string) (interface{}, error) {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, data
func (_m *IStorage) Set(key string, data interface{}) error {
	ret := _m.Called(key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWithExpire provides a mock function with given fields: key, data, ttl
func (_m *IStorage) SetWithExpire(key string, data interface{}, ttl time.Duration) error {
	ret := _m.Called(key, data, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, data, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StrSet provides a mock function with given fields: key
func (_m *IStorage) StrSet(key string) nosql.IStrSet {
	ret := _m.Called(key)

	var r0 nosql.IStrSet
	if rf, ok := ret.Get(0).(func(string) nosql.IStrSet); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nosql.IStrSet)
		}
	}

	return r0
}
