// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"

import time "time"

// IStrSet is an autogenerated mock type for the IStrSet type
type IStrSet struct {
	mock.Mock
}

// Add provides a mock function with given fields: val
func (_m *IStrSet) Add(val string) error {
	ret := _m.Called(val)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddExpire provides a mock function with given fields: val, ttl
func (_m *IStrSet) AddExpire(val string, ttl time.Duration) error {
	ret := _m.Called(val, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(val, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Check provides a mock function with given fields: val
func (_m *IStrSet) Check(val string) (bool, error) {
	ret := _m.Called(val)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(val)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *IStrSet) List() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: val
func (_m *IStrSet) Remove(val string) error {
	ret := _m.Called(val)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
